@using Hrm.Domain.Roles;
@model Hrm.Domain.ViewModels.Departament.DepartmentEditModel;
@{
    Layout = "_Layout";
    ViewData["Title"] = $"{((Model.Id != 0)? "Edit": "Create")} Departament";
}

<div class="row justify-content-center">
    <div class="col-6">

        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status" id="loader" style="display:none;">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        @using (Html.BeginForm("Edit", "Department", FormMethod.Post, new { onsubmit = "return showLoader()" }))
        {
            @Html.AntiForgeryToken()
            <div class="form-horizontal">
                <h4>@((Model.Id != 0) ? "Edit" : "Create") Department</h4>
                @Html.ValidationSummary(true)

                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                    @Html.TextAreaFor(model => model.Description, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.MinEmployeeNeed, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.MinEmployeeNeed, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MinEmployeeNeed, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ParentDepartmentId, htmlAttributes: new { @class = "control-label" })
                    <select class="form-select" asp-for="ParentDepartmentId" asp-items="@Model.DepartmentSelectList"></select>
                    @Html.ValidationMessageFor(model => model.ParentDepartmentId, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ManagerId, htmlAttributes: new { @class = "control-label" })
                    <select class="form-select" asp-for="ManagerId" asp-items="@Model.UserSelectList"></select>
                    @Html.ValidationMessageFor(model => model.ManagerId, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.UserIds, htmlAttributes: new { @class = "control-label" })
                    <select class="form-select" asp-for="UserIds" asp-items="@Model.UserSelectList" multiple></select>
                    @Html.ValidationMessageFor(model => model.UserIds, "", new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.ValidationMessage("Error", "", new { @class = "text-danger" })
                </div>
               
                <div class="form-group text-center">
                    <input type="submit" value="@((Model.Id != 0)? "Edit": "Create")" class="btn btn-primary mt-4" />
                    @if(Model.Id !=0)
                    {
                        <a class="btn btn-warning mt-4" asp-controller="Department" asp-action="Details" asp-route-id="@Model.Id">Cancel</a>
                    }
                    else
                    {
                        <a class="btn btn-warning mt-4" asp-controller="Department" asp-action="Index">Cancel</a>
                    }
                </div>
            </div>
        }
    </div>
</div>